// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Action         *action
	Behavior       *behavior
	Config         *config
	Counter        *counter
	Credential     *credential
	Data           *data
	Form           *form
	Instruct       *instruct
	KeyResult      *keyResult
	KeyResultValue *keyResultValue
	Message        *message
	OAuth          *oAuth
	Objective      *objective
	Page           *page
	Parameter      *parameter
	Session        *session
	Todo           *todo
	Topic          *topic
	Url            *url
	User           *user
	Workflow       *workflow
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Action = &Q.Action
	Behavior = &Q.Behavior
	Config = &Q.Config
	Counter = &Q.Counter
	Credential = &Q.Credential
	Data = &Q.Data
	Form = &Q.Form
	Instruct = &Q.Instruct
	KeyResult = &Q.KeyResult
	KeyResultValue = &Q.KeyResultValue
	Message = &Q.Message
	OAuth = &Q.OAuth
	Objective = &Q.Objective
	Page = &Q.Page
	Parameter = &Q.Parameter
	Session = &Q.Session
	Todo = &Q.Todo
	Topic = &Q.Topic
	Url = &Q.Url
	User = &Q.User
	Workflow = &Q.Workflow
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Action:         newAction(db, opts...),
		Behavior:       newBehavior(db, opts...),
		Config:         newConfig(db, opts...),
		Counter:        newCounter(db, opts...),
		Credential:     newCredential(db, opts...),
		Data:           newData(db, opts...),
		Form:           newForm(db, opts...),
		Instruct:       newInstruct(db, opts...),
		KeyResult:      newKeyResult(db, opts...),
		KeyResultValue: newKeyResultValue(db, opts...),
		Message:        newMessage(db, opts...),
		OAuth:          newOAuth(db, opts...),
		Objective:      newObjective(db, opts...),
		Page:           newPage(db, opts...),
		Parameter:      newParameter(db, opts...),
		Session:        newSession(db, opts...),
		Todo:           newTodo(db, opts...),
		Topic:          newTopic(db, opts...),
		Url:            newUrl(db, opts...),
		User:           newUser(db, opts...),
		Workflow:       newWorkflow(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Action         action
	Behavior       behavior
	Config         config
	Counter        counter
	Credential     credential
	Data           data
	Form           form
	Instruct       instruct
	KeyResult      keyResult
	KeyResultValue keyResultValue
	Message        message
	OAuth          oAuth
	Objective      objective
	Page           page
	Parameter      parameter
	Session        session
	Todo           todo
	Topic          topic
	Url            url
	User           user
	Workflow       workflow
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Action:         q.Action.clone(db),
		Behavior:       q.Behavior.clone(db),
		Config:         q.Config.clone(db),
		Counter:        q.Counter.clone(db),
		Credential:     q.Credential.clone(db),
		Data:           q.Data.clone(db),
		Form:           q.Form.clone(db),
		Instruct:       q.Instruct.clone(db),
		KeyResult:      q.KeyResult.clone(db),
		KeyResultValue: q.KeyResultValue.clone(db),
		Message:        q.Message.clone(db),
		OAuth:          q.OAuth.clone(db),
		Objective:      q.Objective.clone(db),
		Page:           q.Page.clone(db),
		Parameter:      q.Parameter.clone(db),
		Session:        q.Session.clone(db),
		Todo:           q.Todo.clone(db),
		Topic:          q.Topic.clone(db),
		Url:            q.Url.clone(db),
		User:           q.User.clone(db),
		Workflow:       q.Workflow.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Action:         q.Action.replaceDB(db),
		Behavior:       q.Behavior.replaceDB(db),
		Config:         q.Config.replaceDB(db),
		Counter:        q.Counter.replaceDB(db),
		Credential:     q.Credential.replaceDB(db),
		Data:           q.Data.replaceDB(db),
		Form:           q.Form.replaceDB(db),
		Instruct:       q.Instruct.replaceDB(db),
		KeyResult:      q.KeyResult.replaceDB(db),
		KeyResultValue: q.KeyResultValue.replaceDB(db),
		Message:        q.Message.replaceDB(db),
		OAuth:          q.OAuth.replaceDB(db),
		Objective:      q.Objective.replaceDB(db),
		Page:           q.Page.replaceDB(db),
		Parameter:      q.Parameter.replaceDB(db),
		Session:        q.Session.replaceDB(db),
		Todo:           q.Todo.replaceDB(db),
		Topic:          q.Topic.replaceDB(db),
		Url:            q.Url.replaceDB(db),
		User:           q.User.replaceDB(db),
		Workflow:       q.Workflow.replaceDB(db),
	}
}

type queryCtx struct {
	Action         *actionDo
	Behavior       *behaviorDo
	Config         *configDo
	Counter        *counterDo
	Credential     *credentialDo
	Data           *dataDo
	Form           *formDo
	Instruct       *instructDo
	KeyResult      *keyResultDo
	KeyResultValue *keyResultValueDo
	Message        *messageDo
	OAuth          *oAuthDo
	Objective      *objectiveDo
	Page           *pageDo
	Parameter      *parameterDo
	Session        *sessionDo
	Todo           *todoDo
	Topic          *topicDo
	Url            *urlDo
	User           *userDo
	Workflow       *workflowDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Action:         q.Action.WithContext(ctx),
		Behavior:       q.Behavior.WithContext(ctx),
		Config:         q.Config.WithContext(ctx),
		Counter:        q.Counter.WithContext(ctx),
		Credential:     q.Credential.WithContext(ctx),
		Data:           q.Data.WithContext(ctx),
		Form:           q.Form.WithContext(ctx),
		Instruct:       q.Instruct.WithContext(ctx),
		KeyResult:      q.KeyResult.WithContext(ctx),
		KeyResultValue: q.KeyResultValue.WithContext(ctx),
		Message:        q.Message.WithContext(ctx),
		OAuth:          q.OAuth.WithContext(ctx),
		Objective:      q.Objective.WithContext(ctx),
		Page:           q.Page.WithContext(ctx),
		Parameter:      q.Parameter.WithContext(ctx),
		Session:        q.Session.WithContext(ctx),
		Todo:           q.Todo.WithContext(ctx),
		Topic:          q.Topic.WithContext(ctx),
		Url:            q.Url.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		Workflow:       q.Workflow.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
